generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  PLAYER
  COACH
  ADMIN
}

enum PlayerPosition {
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  FORWARD
}

enum MealType {
  BREAKFAST
  SNACK
  LUNCH
  DINNER
  EVENING_SNACK
  AFTER_PRACTICE
}

model User {
  id                   String           @id @default(uuid())
  clerkId              String?          @unique  // Legacy field, now optional
  supabaseId           String?          @unique  // Primary authentication field for Supabase
  email                String           @unique
  name                 String
  age                  Int
  role                 UserRole         @default(PLAYER)
  position             PlayerPosition?
  parentEmail          String?
  dataConsent          Boolean          @default(false)
  teamId               String?
  team                 Team?            @relation(fields: [teamId], references: [id])
  
  // Onboarding fields
  ageGroup             String?          // '10-12', '13-15', '16-18', '19-25'
  goals                String[]         @default([])
  trainingDaysPerWeek  Int              @default(3)
  completedOnboarding  Boolean          @default(false)
  onboardingDate       DateTime?
  preferences          Json?            // Stores user preferences as JSON
  
  // Gamification fields
  totalXP              Int              @default(0)
  currentLevel         Int              @default(1)
  currentStreak        Int              @default(0)
  longestStreak        Int              @default(0)
  lastMealDate         DateTime?
  
  // Relations
  foodEntries          FoodEntry[]
  performanceMetrics   PerformanceMetric[]
  teams                TeamMember[]
  nutritionGoals       NutritionGoal[]
  achievements         Achievement[]
  leaderboardEntries   LeaderboardEntry[]
  teamMessages         TeamMessage[]
  teamAnnouncements    TeamAnnouncement[]
  teamChallenges       TeamChallenge[]
  
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  deletedAt            DateTime?

  @@index([clerkId])
  @@index([email])
  @@index([teamId])
  @@index([totalXP])
}

model Team {
  id                String            @id @default(uuid())
  name              String
  inviteCode        String            @unique @default(cuid())
  description       String?
  coachId           String?
  players           User[]            // Legacy relation, use TeamMember for new features
  members           TeamMember[]
  leaderboardEntries TeamLeaderboard[]
  messages          TeamMessage[]
  announcements     TeamAnnouncement[]
  challenges        TeamChallenge[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([inviteCode])
  @@index([coachId])
}

model TeamMember {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  role      String   @default("PLAYER") // PLAYER, COACH, ASSISTANT
  joinedAt  DateTime @default(now())
  
  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model FoodEntry {
  id             String    @id @default(uuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  date           DateTime
  mealType       MealType
  time           String
  location       String?
  description    String
  notes          String?
  
  // Nutrition analysis fields
  nutritionScore Int?      // 0-100 score
  quality        String?   // 'poor' | 'fair' | 'good' | 'excellent'
  calories       Int?      // Estimated calories
  protein        Int?      // Grams of protein
  carbs          Int?      // Grams of carbs
  fats           Int?      // Grams of fats
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([userId, date])
  @@index([date])
}

model PerformanceMetric {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  date           DateTime
  energyLevel    Int      // 1-5 scale
  sleepHours     Float    // Auto-calculated from bedTime and wakeTime
  bedTime        String?  // Time when went to bed (e.g., "22:30")
  wakeTime       String?  // Time when woke up (e.g., "06:45")
  isTrainingDay  Boolean  @default(false)
  trainingType   String?
  matchDay       Boolean  @default(false)
  recoveryLevel  Int?     // 1-5 scale: 1=very sore, 5=fully recovered
  hadRecoveryMeal Boolean @default(false) // Track if had post-practice meal
  recoveryNotes  String?  // Notes about recovery (muscle soreness, fatigue, etc)
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId, date])
  @@index([date])
}

model NutritionGoal {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  goalType    String    // 'daily_calories', 'protein_intake', 'carbs_intake', 'water_intake'
  targetValue Float     // Target value for the goal
  unit        String    // 'calories', 'grams', 'liters', etc.
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean   @default(true)
  progress    Float     @default(0) // Current progress towards goal
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([goalType])
  @@index([isActive])
}

model Achievement {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String   // 'streak', 'nutrition_score', 'consistency', 'milestone'
  name        String   // Achievement name
  description String   // Achievement description
  icon        String?  // Icon identifier for UI
  earnedAt    DateTime @default(now())
  metadata    Json?    // Additional achievement data (streak count, score, etc.)
  
  @@index([userId])
  @@index([type])
  @@index([earnedAt])
}

model FoodLibrary {
  id            String   @id @default(uuid())
  name          String   @unique
  nameFi        String?  // Finnish name
  category      String   // 'protein', 'carbs', 'vegetables', 'fruits', 'dairy', 'snacks'
  subcategory   String?  // More specific categorization
  nutritionData Json     // Detailed nutrition info per 100g
  servingSizes  Json?    // Common serving sizes
  isNordic      Boolean  @default(false) // Nordic/Finnish food
  isVerified    Boolean  @default(false) // Verified by nutritionist
  tags          String[] // Tags for search and filtering
  barcode       String?  // Product barcode if applicable
  brand         String?  // Brand name if applicable
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([category])
  @@index([isNordic])
  @@index([isVerified])
  @@index([name])
}

model LeaderboardEntry {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  period           String   // 'week', 'month', 'all-time'
  startDate        DateTime
  endDate          DateTime?
  
  // Stats
  xpEarned         Int      @default(0)
  nutritionScore   Float    @default(0) // Average nutrition score for period
  mealsLogged      Int      @default(0)
  streakDays       Int      @default(0)
  performanceScore Float?   // Average performance score
  
  // Ranking
  rank             Int?
  previousRank     Int?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@unique([userId, period, startDate])
  @@index([period, xpEarned])
  @@index([userId])
  @@index([startDate])
}

model TeamLeaderboard {
  id                String   @id @default(uuid())
  teamId            String
  team              Team     @relation(fields: [teamId], references: [id])
  period            String   // 'week', 'month', 'all-time'
  startDate         DateTime
  endDate           DateTime?
  
  // Team Stats
  totalXP           Int      @default(0)
  avgNutritionScore Float    @default(0)
  totalMealsLogged  Int      @default(0)
  activePlayers     Int      @default(0)
  topPerformerId    String?  // User ID of top performer
  topPerformerName  String?  // Cached name for display
  
  // Ranking
  rank              Int?
  previousRank      Int?
  weeklyProgress    Float?   // Percentage change from last week
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([teamId, period, startDate])
  @@index([period, totalXP])
  @@index([teamId])
  @@index([startDate])
}

model TeamMessage {
  id          String    @id @default(uuid())
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  content     String
  messageType String    @default("text") // 'text', 'announcement', 'challenge', 'achievement'
  metadata    Json?     // For storing additional data like mentions, reactions, etc.
  edited      Boolean   @default(false)
  editedAt    DateTime?
  createdAt   DateTime  @default(now())
  
  @@index([teamId, createdAt])
  @@index([userId])
}

model TeamAnnouncement {
  id          String    @id @default(uuid())
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  authorId    String    // Coach or Admin who created it
  author      User      @relation(fields: [authorId], references: [id])
  title       String
  content     String
  priority    String    @default("normal") // 'low', 'normal', 'high', 'urgent'
  pinned      Boolean   @default(false)
  expiresAt   DateTime? // Optional expiry date
  readBy      String[]  @default([]) // Array of user IDs who have read it
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([teamId, pinned])
  @@index([authorId])
  @@index([expiresAt])
}

model TeamChallenge {
  id             String    @id @default(uuid())
  teamId         String
  team           Team      @relation(fields: [teamId], references: [id])
  createdBy      String
  creator        User      @relation(fields: [createdBy], references: [id])
  name           String
  description    String
  challengeType  String    // 'nutrition', 'streak', 'performance', 'team'
  target         Json      // Flexible target data (e.g., { meals: 100, days: 7 })
  reward         Json?     // XP, badges, etc.
  startDate      DateTime
  endDate        DateTime
  status         String    @default("active") // 'draft', 'active', 'completed', 'cancelled'
  participants   String[]  @default([]) // User IDs participating
  progress       Json?     // Track progress data
  winnerId       String?   // User or Team ID of winner
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  @@index([teamId, status])
  @@index([startDate, endDate])
  @@index([createdBy])
}
