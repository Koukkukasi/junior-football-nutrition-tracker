generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PLAYER
  COACH
  ADMIN
}

enum PlayerPosition {
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  FORWARD
}

enum MealType {
  BREAKFAST
  SNACK
  LUNCH
  DINNER
  EVENING_SNACK
  AFTER_PRACTICE
}

model User {
  id                   String           @id @default(uuid())
  clerkId              String           @unique
  supabaseId           String?          @unique  // New field for Supabase authentication
  email                String           @unique
  name                 String
  age                  Int
  role                 UserRole         @default(PLAYER)
  position             PlayerPosition?
  parentEmail          String?
  dataConsent          Boolean          @default(false)
  teamId               String?
  team                 Team?            @relation(fields: [teamId], references: [id])
  
  // Onboarding fields
  ageGroup             String?          // '10-12', '13-15', '16-18', '19-25'
  goals                String[]         @default([])
  trainingDaysPerWeek  Int              @default(3)
  completedOnboarding  Boolean          @default(false)
  onboardingDate       DateTime?
  preferences          Json?            // Stores user preferences as JSON
  
  // Relations
  foodEntries          FoodEntry[]
  performanceMetrics   PerformanceMetric[]
  teams                TeamMember[]
  
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  deletedAt            DateTime?

  @@index([clerkId])
  @@index([email])
  @@index([teamId])
}

model Team {
  id          String       @id @default(uuid())
  name        String
  inviteCode  String       @unique @default(cuid())
  description String?
  coachId     String?
  players     User[]       // Legacy relation, use TeamMember for new features
  members     TeamMember[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([inviteCode])
  @@index([coachId])
}

model TeamMember {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  role      String   @default("PLAYER") // PLAYER, COACH, ASSISTANT
  joinedAt  DateTime @default(now())
  
  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model FoodEntry {
  id             String    @id @default(uuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  date           DateTime
  mealType       MealType
  time           String
  location       String?
  description    String
  notes          String?
  
  // Nutrition analysis fields
  nutritionScore Int?      // 0-100 score
  quality        String?   // 'poor' | 'fair' | 'good' | 'excellent'
  calories       Int?      // Estimated calories
  protein        Int?      // Grams of protein
  carbs          Int?      // Grams of carbs
  fats           Int?      // Grams of fats
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([userId, date])
  @@index([date])
}

model PerformanceMetric {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  date           DateTime
  energyLevel    Int      // 1-5 scale
  sleepHours     Float    // Auto-calculated from bedTime and wakeTime
  bedTime        String?  // Time when went to bed (e.g., "22:30")
  wakeTime       String?  // Time when woke up (e.g., "06:45")
  isTrainingDay  Boolean  @default(false)
  trainingType   String?
  matchDay       Boolean  @default(false)
  recoveryLevel  Int?     // 1-5 scale: 1=very sore, 5=fully recovered
  hadRecoveryMeal Boolean @default(false) // Track if had post-practice meal
  recoveryNotes  String?  // Notes about recovery (muscle soreness, fatigue, etc)
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId, date])
  @@index([date])
}
