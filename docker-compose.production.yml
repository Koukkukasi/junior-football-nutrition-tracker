version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: nutrition-tracker-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-nutrition_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-nutrition_tracker}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - nutrition-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-nutrition_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application Server
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nutrition-tracker-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-nutrition_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-nutrition_tracker}?schema=public
      CLERK_PUBLISHABLE_KEY: ${CLERK_PUBLISHABLE_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      FRONTEND_URL: ${FRONTEND_URL:-https://localhost}
      PORT: 3001
    ports:
      - "3001:3001"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - nutrition-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: nutrition-tracker-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./client/dist:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - nutrition-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: nutrition-tracker-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - nutrition-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backup Service
  backup:
    image: postgres:16-alpine
    container_name: nutrition-tracker-backup
    depends_on:
      - postgres
    environment:
      PGUSER: ${DB_USER:-nutrition_user}
      PGPASSWORD: ${DB_PASSWORD}
      PGDATABASE: ${DB_NAME:-nutrition_tracker}
      PGHOST: postgres
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - nutrition-network
    entrypoint: ["/bin/sh", "-c"]
    command: ["while true; do /backup.sh; sleep 86400; done"]

networks:
  nutrition-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  nginx_cache: